#!/usr/bin/env python3
import sys
sys.setrecursionlimit(10000000)
INF = 1<<32

def solve(N: int, M: int, A: "List[int]", B: "List[int]"):

    g = [[0] * (N+1) for i in range(N+1)]

    for i in range(M):
        g[A[i]][B[i]] = 1
        g[B[i]][A[i]] = 1

    ans = list()
    for i in range(1,N+1):
        ad = list()
        adad = list()
        for j in range(N+1):
            if g[i][j] == 1:
                ad.append(j)

        for j in ad:
            for k in range(N+1):
                if g[j][k] == 1:
                    adad.append(k)
        # print(set(adad)-set(ad)-{i})
        ans.append(len(set(adad)-set(ad)-{i}))
        

    for i in ans:
        print(i)

    return


# Generated by 1.1.4 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    A = [int()] * (M)  # type: "List[int]" 
    B = [int()] * (M)  # type: "List[int]" 
    for i in range(M):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    solve(N, M, A, B)

if __name__ == '__main__':
    main()
