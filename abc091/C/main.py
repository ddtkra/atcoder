#!/usr/bin/env python3
import sys


def solve(N: int, a: "List[int]", b: "List[int]", c: "List[int]", d: "List[int]"):
    red = sorted([[a[i],b[i]] for i in range(N)], key=lambda x:x[1], reverse=True)
    blue = sorted([[c[i],d[i]] for i in range(N)], key=lambda x:x[0])

    checked = [False] * N
    

    for i in range(N):
        for j in range(N):
            if((red[j][0] < blue[i][0] and red[j][1] < blue[i][1]) and  not checked[j]):
                checked[j] = True
                break

    print(checked.count(True))

        
    return


# Generated by 1.1.4 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    a = [int()] * (N)  # type: "List[int]" 
    b = [int()] * (N)  # type: "List[int]" 
    for i in range(N):
        a[i] = int(next(tokens))
        b[i] = int(next(tokens))
    c = [int()] * (N)  # type: "List[int]" 
    d = [int()] * (N)  # type: "List[int]" 
    for i in range(N):
        c[i] = int(next(tokens))
        d[i] = int(next(tokens))
    solve(N, a, b, c, d)

if __name__ == '__main__':
    main()
