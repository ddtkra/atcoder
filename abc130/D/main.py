#!/usr/bin/env python3
import sys


def solve(N: int, K: int, a: "List[int]"):

    aa = [0] *(N+1)
    aa[1] = a[0]
    for i in range(1,N+1):
        aa[i] = aa[i-1]+a[i]
    print(aa)
    ans = 0
    for i in range(1,N+1):
        t = []
        for j in range(0,N,1):
            # print(i, j, a[j:j+i])
            if(i+j <= N):
                # print(i, j, a[j:j+i])
                # t.append(sum(a[j:j+i]))
                t.append(aa[j+i+1]-aa[j])
        ans += len([k for k in t if(k >= K)])

    print(ans)
    return


# Generated by 1.1.4 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    a = [ int(next(tokens)) for _ in range(N) ]  # type: "List[int]"
    solve(N, K, a)

if __name__ == '__main__':
    main()
