#!/usr/bin/env python3
import sys
sys.setrecursionlimit(10**7)

MOD = 1000000007  # type: int
dx = [-1,0,1,0]
dy = [0,-1,0,1]

def solve(H: int, W: int, a: "List[List[int]]"):
    dp = [[1]*W for i in range(H)]

    def rec(x: int, y:int) -> int:
        if(dp[x][y] > 1):
            return dp[x][y]
    
        res = 1
        for i in range(4):
            ix = x+dx[i]
            jy = y+dy[i]
            if(0 <= ix < H and 0 <= jy < W and a[ix][jy] > a[x][y]):
                res += rec(ix, jy)

        dp[x][y] = res % MOD

        return dp[x][y]

    
    ans = 0

    ans = sum([rec(i,j) for i in range(H) for j in range(W)]) % MOD

    print(ans)

    return


# Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    H = int(next(tokens))  # type: int
    W = int(next(tokens))  # type: int
    a = [[int(next(tokens)) for _ in range(W)] for _ in range(H)]  # type: "List[List[int]]"
    solve(H, W, a)

if __name__ == '__main__':
    main()
