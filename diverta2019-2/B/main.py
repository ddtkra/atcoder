#!/usr/bin/env python3
import sys


def solve(N: int, x: "List[int]", y: "List[int]"):
    # rted(a, key=lambda x:x[1], reverse=True)

    a = [[x[i],y[i]] for i in range(N)]

    if(N == 1):
        print(1)
        exit()

    x.sort()
    y.sort()

    from collections import Counter

    csx = Counter([abs(x[i+1]-x[i]) for i in range(N-1)])
    csy = Counter([abs(y[i+1]-y[i]) for i in range(N-1)])

    p = [i for i,v in csx.most_common()] + [-1*i for i,v in csx.most_common()]
    q = [i for i,v in csy.most_common()] + [-1*i for i,v in csy.most_common()]
    p.sort()
    q.sort()

    a = sorted(a, key=lambda x:(x[1],x[0]), reverse=True)
    ans = 10000000000
    for i in p:
        for j in q:
            if(i == 0 and j == 0):
                continue
            
            tans = 1
            rx,ry = a[0]
            for k in range(1,N):
                s,t = a[k]

                # if(s != rx+i or t != ry+j):
                #     continue

                if(a[k-1][0] == s-i and a[k-1][1] == t-j):
                    continue
                else:
                    tans += 1
                    rx = s
                    ry = t
            ans = min(ans,tans)

    a = sorted(a, key=lambda x:(x[0],x[1]), reverse=True)
    for i in p:
        for j in q:
            if(i == 0 and j == 0):
                continue
            tans = 1

            for k in range(1,N):
                s,t = a[k]

                if(a[k-1][0] == s-i and a[k-1][1] == t-j):
                    continue
                else:
                    tans += 1
            ans = min(ans,tans)




    print(ans)

    return


# Generated by 1.1.3 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    x = [int()] * (N)  # type: "List[int]" 
    y = [int()] * (N)  # type: "List[int]" 
    for i in range(N):
        x[i] = int(next(tokens))
        y[i] = int(next(tokens))
    solve(N, x, y)

if __name__ == '__main__':
    main()
