#!/usr/bin/env python3
import sys
import math

MOD = 1000000007  # type: int

def isprime(x :int):
    if(x == 2):
        return True
    
    if(x < 2 or x%2 == 0):
        return False

    for i in range(3,int(math.sqrt(x),2)):
        if(x%i == 0):
            return False

    return True


def eratos(n :int):
    # initialize
    isprime = [True] * (n+1)
    isprime[0] = isprime[1] = False

    for i in range(2, int(math.sqrt(n)+1)):
        if(isprime[i]):
            j = i+i
            while(j <= n):
                isprime[j] = False
                j = j+i

    return isprime

def solve(N: int, A: int, B: int, C: int):
    x = (N/max(A, B)/100.0)

    e = [i for i,x in enumerate(eratos(math.ceil(MOD))) if x == True]
    # print(e[:1])
    if(not e):
        print(2)
        sys.exit()
    
    r = 0
    q = 0
    for i in e:
        for j in e:
            if(x * (j%MOD) == (i%MOD)):
                r = i
                q = j

    print(r,q)


    return


# Generated by 1.1.4 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = int(next(tokens))  # type: int
    B = int(next(tokens))  # type: int
    C = int(next(tokens))  # type: int
    solve(N, A, B, C)

if __name__ == '__main__':
    main()
