#!/usr/bin/env python3
import sys

INF = -1

def solve(N: int, a: "List[int]", b: "List[int]", c: "List[int]"):
    # graph
    from collections import defaultdict
    graph = defaultdict(list)
    for i in range(N):
        graph[a[i-1]].append(b[i-1])

    # deque 
    from collections import deque
    d = deque()

    d.append(0)

    c.sort()

    ans = 0
    al = []
    ci = 0
    visited = [False]*(N)
    while(len(d)):
        n = d.pop()
        visited[n] = True

        fi = False
        for i in graph[n]:
            if(visited[i] == True):
                continue
            else:
                fi = True
        
        if(not fi):
            ans += c[ci]
            ci += 1
            al.append(c[ci])
        else:
            for i,t in graph[n]:
                if(visited[i]):
                    continue
                else:
                    d.append([i,t])

    print(visited)
    print(ans)
    # for k,v in graph:
    #     print(k,v)    

    return


# Generated by 1.1.4 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    a = [int()] * (N-1)  # type: "List[int]" 
    b = [int()] * (N-1)  # type: "List[int]" 
    for i in range(N-1):
        a[i] = int(next(tokens))
        b[i] = int(next(tokens))
    c = [ int(next(tokens)) for _ in range(N) ]  # type: "List[int]"
    solve(N, a, b, c)

if __name__ == '__main__':
    main()
