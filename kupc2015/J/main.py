#!/usr/bin/env python3
import sys


def solve(n: int, q: int, a: "List[int]", b: "List[int]", c: "List[int]", x: "List[int]", v: "List[int]", w: "List[int]"):
    return


# Generated by 1.1.4 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    n = int(next(tokens))  # type: int
    q = int(next(tokens))  # type: int
    a = [ int(next(tokens)) for _ in range(n) ]  # type: "List[int]"
    b = [int()] * (n-1)  # type: "List[int]" 
    c = [int()] * (n-1)  # type: "List[int]" 
    for i in range(n-1):
        b[i] = int(next(tokens))
        c[i] = int(next(tokens))
    x = [int()] * (q)  # type: "List[int]" 
    v = [int()] * (q)  # type: "List[int]" 
    w = [int()] * (q)  # type: "List[int]" 
    for i in range(q):
        x[i] = int(next(tokens))
        v[i] = int(next(tokens))
        w[i] = int(next(tokens))
    solve(n, q, a, b, c, x, v, w)

if __name__ == '__main__':
    main()
