#!/usr/bin/env python3
import sys
from math import sqrt

YES = "YES"  # type: str
NO = "NO"  # type: str


def solve(tx_a: int, ty_a: int, tx_b: int, ty_b: int, T: int, V: int, n: int, x: "List[int]", y: "List[int]"):

    def dis(x1, x2, y1, y2):
        return sqrt((x2-x1)**2 + (y2-y1)**2)

    if any([V*T >= dis(tx_a, x[i], ty_a, y[i]) + dis(tx_b, x[i], ty_b, y[i]) for i in range(n)]):
        print(YES)
    else:
        print(NO)


    return


# Generated by 1.1.4 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    tx_a = int(next(tokens))  # type: int
    ty_a = int(next(tokens))  # type: int
    tx_b = int(next(tokens))  # type: int
    ty_b = int(next(tokens))  # type: int
    T = int(next(tokens))  # type: int
    V = int(next(tokens))  # type: int
    n = int(next(tokens))  # type: int
    x = [int()] * (n)  # type: "List[int]" 
    y = [int()] * (n)  # type: "List[int]" 
    for i in range(n):
        x[i] = int(next(tokens))
        y[i] = int(next(tokens))
    solve(tx_a, ty_a, tx_b, ty_b, T, V, n, x, y)

if __name__ == '__main__':
    main()
