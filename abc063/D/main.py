#!/usr/bin/env python3
import sys
from math import ceil

def solve(N: int, A: int, B: int, h: "List[int]"):
    INF = 10000000000
    
    def f(K: int):
        c = 0
        for i in range(N):
            c += ceil(max(0, h[i] - B*K)/(A-B))

        if c <= K:
            return True
        else:
            return False

    def b(ok: int, ng: int):
        
        while ok-ng > 1:
            mid = (ok+ng)//2
            if f(mid):
                ok = mid
            else:
                ng = mid

        return ok

    print(b(INF, 0))

    return


# Generated by 1.1.5 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = int(next(tokens))  # type: int
    B = int(next(tokens))  # type: int
    h = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, A, B, h)

if __name__ == '__main__':
    main()
