#!/usr/bin/env python3
import sys
import heapq

def solve(N: int, M: int, A: "List[int]"):
    # A.sort()
    # for i in range(M):
    #     A[-1] = A[-1] // 2
    #     A.sort()

    mA = [-1*i for i in A]
    heapq.heapify(mA)
    # print(mA)

    for i in range(M):
        x = heapq.heappop(mA)*(-1)
        x = x // 2
        heapq.heappush(mA, -1*x)

    print(-1*sum(mA))
    return


# Generated by 1.1.5 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, M, A)

if __name__ == '__main__':
    main()
