#!/usr/bin/env python3
import sys
from collections import deque

def solve(N: int, u: "List[int]", v: "List[int]", w: "List[int]"):
    m = [([-1] * (N+1)) for i in range(N+1)]
    deq = deque()
    colors = [-1] * (N+1)
    for i in range(len(u)):
        m[u[i]][v[i]] = w[i]
    # 最初は0
    deq.append(0)
    colors[0] = 0
    m[0][0] = 0

    while(len(deq) != 0):
        x = deq.pop()
        for i,v in enumerate(m[x]):
            if((v != -1 or v != 0) and colors[i] != -1):
                colors[i] = m[x][i] % 2
                deq.append(i)

    print(colors)

    return


# Generated by 1.1.4 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    u = [int()] * (N-1)  # type: "List[int]" 
    v = [int()] * (N-1)  # type: "List[int]" 
    w = [int()] * (N-1)  # type: "List[int]" 
    for i in range(N-1):
        u[i] = int(next(tokens))
        v[i] = int(next(tokens))
        w[i] = int(next(tokens))
    solve(N, u, v, w)

if __name__ == '__main__':
    main()
