#!/usr/bin/env python3
import sys
sys.setrecursionlimit(100000)
from functools import lru_cache


c = 0
MOD = 1000000007  # type: int

@lru_cache(maxsize=1000)
def dfs(x: int, y: int):
    global c
    if(x >= H or y >= W or (x >= A and y <= B)):
        return False
    if(x == H-1 and y == W-1):
        c += 1
        return True

    if dfs(x+1, y):
        dp[x][y] += 1
    if dfs(x, y+1):
        dp[x][y] += 1


def solve(H: int, W: int, A: int, B: int):
    global dp
    dp = [[0] * W for i in range(H)]


    dfs(0,0)
    print(sum([sum(i) for i in dp])%MOD)
    return


# Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    global H, W, A, B
    H = int(next(tokens))  # type: int
    W = int(next(tokens))  # type: int
    A = int(next(tokens))  # type: int
    B = int(next(tokens))  # type: int
    solve(H, W, A, B)

if __name__ == '__main__':
    main()
