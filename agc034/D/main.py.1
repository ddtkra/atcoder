#!/usr/bin/env python3
import sys


def solve(N: int, RX: "List[int]", RY: "List[int]", RC: "List[int]", BX: "List[int]", BY: "List[int]", BC: "List[int]"):
    return


# Generated by 1.1.4 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    RX = [int()] * (N)  # type: "List[int]" 
    RY = [int()] * (N)  # type: "List[int]" 
    RC = [int()] * (N)  # type: "List[int]" 
    for i in range(N):
        RX[i] = int(next(tokens))
        RY[i] = int(next(tokens))
        RC[i] = int(next(tokens))
    BX = [int()] * (N)  # type: "List[int]" 
    BY = [int()] * (N)  # type: "List[int]" 
    BC = [int()] * (N)  # type: "List[int]" 
    for i in range(N):
        BX[i] = int(next(tokens))
        BY[i] = int(next(tokens))
        BC[i] = int(next(tokens))
    solve(N, RX, RY, RC, BX, BY, BC)

if __name__ == '__main__':
    main()
