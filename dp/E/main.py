#!/usr/bin/env python3
import sys
INF = 1<<32

def solve(N: int, W: int, w: "List[int]", v: "List[int]"):
    dp = [[INF] * (max(v)*N+1) for i in range(N+1)]
    dp[0][0] = 0

    for i in range(N):
        for sumv in range(max(v)*N+1):
            if(sumv - v[i-1] >= 0):
                dp[i+1][sumv] = min(dp[i][sumv], dp[i][sumv-v[i-1]] + w[i-1])
            else:
                dp[i+1][sumv] = dp[i][sumv]

    ans = 0
    for i in range(max(v)*N+1):
        if(dp[N][i] <= W): ans = i

    # for i in dp:
    #     print(i)

    print(ans)

    return


# Generated by 1.1.4 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    W = int(next(tokens))  # type: int
    w = [int()] * (N)  # type: "List[int]" 
    v = [int()] * (N)  # type: "List[int]" 
    for i in range(N):
        w[i] = int(next(tokens))
        v[i] = int(next(tokens))
    solve(N, W, w, v)

if __name__ == '__main__':
    main()
