#!/usr/bin/env python3
import sys

MOD = 1000000007  # type: int

def solve(H: int, W: int, a: "[List[str]"):
    dp = [[0] * (W+1) for i in range(H+1)]

    dp[0][0] = 1
    for i in range(H):
        for j in range(W):
            
            if 0 <= i < H and 0 <= j+1 < W and a[i][j+1] == '.':
                dp[i][j+1] = (dp[i][j+1] + dp[i][j]) % MOD
            if 0 <= i+1 < H and 0 <= j < W and a[i+1][j] == '.':
                dp[i+1][j] = (dp[i+1][j] + dp[i][j]) % MOD


    print(dp[H-1][W-1])
    return


# Generated by 1.1.4 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    H = int(next(tokens))  # type: int
    W = int(next(tokens))  # type: int
    a = [ next(tokens) for _ in range(H) ]  # type: "List[List[str]]"
    solve(H, W, a)

if __name__ == '__main__':
    main()
