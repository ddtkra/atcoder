#!/usr/bin/env python3
import sys
from math import ceil

def solve(N: int, p: "List[float]"):

    dp = [[0.0] * (N+1) for i in range(N+1)]

    dp[0][0] = 1
    for i in range(N):
         for j in range(N):
             dp[i+1][j] += dp[i][j] * (1-p[i])
             dp[i+1][j+1] += dp[i][j] * p[i]

    print(sum(dp[N][ceil(N/2):]))


    return


# Generated by 1.1.4 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    p = [ float(next(tokens)) for _ in range(N) ]  # type: "List[float]"
    solve(N, p)

if __name__ == '__main__':
    main()
