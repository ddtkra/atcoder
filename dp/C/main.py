#!/usr/bin/env python3
import sys


def solve(N: int, a: "List[int]", b: "List[int]", c: "List[int]"):
    INF = 0
    dp = [[INF] * (N+1) for i in range(3)]

    for i in range(N):
        dp[0][i+1] += max(dp[1][i]+a[i], dp[2][i]+a[i])
        dp[1][i+1] += max(dp[0][i]+b[i], dp[2][i]+b[i])
        dp[2][i+1] += max(dp[1][i]+c[i], dp[0][i]+c[i])

    print(max(dp[0][N], dp[1][N], dp[2][N]))
    return


# Generated by 1.1.4 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    a = [int()] * (N)  # type: "List[int]" 
    b = [int()] * (N)  # type: "List[int]" 
    c = [int()] * (N)  # type: "List[int]" 
    for i in range(N):
        a[i] = int(next(tokens))
        b[i] = int(next(tokens))
        c[i] = int(next(tokens))
    solve(N, a, b, c)

if __name__ == '__main__':
    main()
