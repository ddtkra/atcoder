#!/usr/bin/env python3
import sys
sys.setrecursionlimit(10**6)


def solve(N: int, M: int, x: "List[int]", y: "List[int]"):
    dp = [-1]*(N+1)
    # G = [[0] * (N+1) for i in range(N+1)]
    G = [[] for i in range(N+1)]
    for i in range(M):
        G[x[i]].append(y[i])


    def rec(v : int):
        if dp[v] != -1:
            return dp[v]
        
        t = 0
        for i in G[v]:
            t = max(t, rec(i)+1)
        dp[v] = t

        return dp[v]

    res = 0
    for i in range(1,N+1):
        res = max(res, rec(i))
    print(res)



    return


# Generated by 1.1.4 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    x = [int()] * (M)  # type: "List[int]" 
    y = [int()] * (M)  # type: "List[int]" 
    for i in range(M):
        x[i] = int(next(tokens))
        y[i] = int(next(tokens))
    solve(N, M, x, y)

if __name__ == '__main__':
    main()
