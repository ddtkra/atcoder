#!/usr/bin/env python3
import sys


def solve(N: int, A: "List[int]"):

    A = [0] + A + [0]
    cost = 0
    for i in range(1, len(A)):
        cost += abs(A[i]-A[i-1])

    for i in range(1,len(A)-1):
        if((A[i-1] <= A[i] <= A[i+1]) or (A[i-1] >= A[i] >= A[i+1])):
            print(cost)
        else:
            print(cost-2*min(abs(A[i+1]-A[i]),abs(A[i]-A[i-1])))


    return


# Generated by 1.1.5 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, A)

if __name__ == '__main__':
    main()
