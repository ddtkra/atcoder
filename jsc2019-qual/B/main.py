#!/usr/bin/env python3
import sys

MOD = 1000000007  # type: int


def solve(N: int, K: int, A: "List[int]"):
    al = [0] * N
    bl = [0] * N
    for i in range(N):
        for j in range(N):
            if i == j:
                continue
            elif A[i] > A[j]:
                al[i] += 1
                if i < j:
                    bl[i] += 1

    ans = 0
    for i in range(N):
        ans += ((K*(K-1)//2)*al[i] + K*bl[i]) % MOD

    
    print(ans%MOD)
    
    return


# Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N - 1 - 0 + 1)]  # type: "List[int]"
    solve(N, K, A)

if __name__ == '__main__':
    main()
