#!/usr/bin/env python3
import sys
sys.setrecursionlimit(10000000)
INF = 1<<32


def solve(N: int, K: int, T: "List[List[int]]"):

    def rec(x: int, v:int):
        if x == N:
            return v == 0

        for i in range(K):
            if rec(x+1, v ^ T[x][i]):
                return True
        
        return False

    
    if rec(0,0):
        print('Found')
    else:
        print('Nothing')



    return


# Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    T = [[int(next(tokens)) for _ in range(K)] for _ in range(N)]  # type: "List[List[int]]"
    solve(N, K, T)

if __name__ == '__main__':
    main()
