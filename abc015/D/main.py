#!/usr/bin/env python3
import sys



def solve(W: int, N: int, K: int, A: "List[int]", B: "List[int]"):
    dp = [[[0]*(W+1) for k in range(K+1)] for i in range(N+1)]

    for i in range(1, N+1):
        for j in range(W+1):
            for k in range(1,K+1):
                if j >=A[i-1]:
                    dp[i][k][j] = max(dp[i-1][k-1][j-A[i-1]]+B[i-1], dp[i-1][k][j])
                else:
                    dp[i][k][j] = dp[i-1][k][j]

    print(dp[N][K][W])


        

    return


# Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    W = int(next(tokens))  # type: int
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    A = [int()] * (N)  # type: "List[int]"
    B = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    solve(W, N, K, A, B)

if __name__ == '__main__':
    main()
