#!/usr/bin/env python3
import sys
from math import ceil

def solve(H: int, W: int):
    ans = 100000000000
    if(H%3 == 0 or W%3 == 0):
        ans = 0
    
    if(H%3):
        ans = min(ans, W)
    if(W%3):
        ans = min(ans, H)
    
    for i in range(1,W):
        if(H%2):
            l = [H*i, (W-i)*(H//2), (W-i)*(H//2+1)]
            l.sort()
            # print(l)
            ans = min(ans, abs(l[2]-l[0]))
        else:
            ans = min(ans, abs(H*i-(W-i)*(H//2)))

    for i in range(1,H):
        if(W%2):
            l = [W*i, (H-i)*(W//2), (H-i)*(W//2+1)]
            l.sort()
            # print(l)
            ans = min(ans, abs(l[2]-l[0]))
        else:
            ans = min(ans, abs(W*i-(H-i)*(W//2)))

    print(ans)

    return


# Generated by 1.1.5 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    H = int(next(tokens))  # type: int
    W = int(next(tokens))  # type: int
    solve(H, W)

if __name__ == '__main__':
    main()
