#!/usr/bin/env python3
import sys
from collections import Counter

def solve(S: str, T: int):
    ct = Counter(list(S))
    # print(ct['U'])
    dx = ct['U'] - ct['D']
    dy = ct['R'] - ct['L']
    # dxx = 0
    # dyy = 0

    if(T == 1):
        print(abs(dx)+abs(dy)+ct['?'])
    else:
        print(max(len(S)%2, abs(dx)+abs(dy)-ct['?']))
    # if(T == 1):
    #     dxx = ct['?'] 
    # else:
    #     if(ct['?'] <= dx):
    #         dxx = -ct['?']
    #     else:
    #         dxx = -dx
    #         dyy = -(ct['?']-dx)

    # print(abs(dy+dyy)+abs(dx+dxx))
    return



# Generated by 1.1.4 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    S = next(tokens)  # type: str
    T = int(next(tokens))  # type: int
    solve(S, T)

if __name__ == '__main__':
    main()
