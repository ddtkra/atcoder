#!/usr/bin/env python3
import sys


def solve(K: int, T: int, a: "List[int]"):
    from heapq import heapify, heappop, heappush

    a = list(map(lambda x:x*(-1), a))
    heapify(a)
    while True:
        if len(a) <= 1:
            break

        x = -1*heappop(a)
        y = -1*heappop(a)
        x -= 1
        y -= 1
        if x > 0:
            heappush(a, -x)
        if y > 0:
            heappush(a, -y)

    if len(a) == 1:
        print(-1*a[0]-1)
    else:
        print(0)

    return


# Generated by 1.1.4 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    K = int(next(tokens))  # type: int
    T = int(next(tokens))  # type: int
    a = [ int(next(tokens)) for _ in range(T) ]  # type: "List[int]"
    solve(K, T, a)

if __name__ == '__main__':
    main()
