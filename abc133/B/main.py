#!/usr/bin/env python3
import sys
from math import sqrt

def solve(N: int, D: int, X: "List[List[int]]"):
    
    ans = 0
    for i in range(N-1):
        l = [.0]*N
        for j in range(i+1,N):
            t = sum([(X[j][k]-X[i][k]) ** 2 for k in range(D)])
            l[j] = sqrt(t)

        for j in range(1,N):
            if(l[j] != 0 and l[j].is_integer()):
                ans += 1

    print(ans) 
    return


# Generated by 1.1.4 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    D = int(next(tokens))  # type: int
    X = [ [ int(next(tokens)) for _ in range(D) ] for _ in range(N) ]  # type: "List[List[int]]"
    solve(N, D, X)

if __name__ == '__main__':
    main()
