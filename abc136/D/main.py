#!/usr/bin/env python3
import sys
from math import ceil, floor

def solve(S: str):
    N = len(S)
    ans = [0] * N

    i = 0
    for i in range(N):
        # 配列をR..Lに分割する
        if((i == 0 and S[i] == 'R') or (S[i-1] == 'L' and S[i] == 'R')):
            try:
                idx = S[i:].index('LR')+i
            except:
                idx = N-1

            # RLのところに集中するのでカウントする
            sidx = S[i:idx+1].index('RL')
            # カウントはRがceil(S[i:idx]), Lがfloor(S[i:idx])
            ans[sidx+i] = ceil(len(S[i:idx+1])/2)
            ans[sidx+i+1] = floor(len(S[i:idx+1])/2)
            if(len(S[i:idx+1])%2 == 1 and S[i:idx+1].count('L')%2 == 1):
                ans[sidx+i], ans[sidx+i+1] = ans[sidx+i+1], ans[sidx+i]

            i = i+idx

    print(' '.join(map(str, ans)))
    # print(ans)
    return


# Generated by 1.1.4 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    S = next(tokens)  # type: str
    solve(S)

if __name__ == '__main__':
    main()
