#!/usr/bin/env python3

YES = "YES"  # type: str
NO = "NO"  # type: str

from collections import deque
import sys


def isfullmaze(maze):
    ans = 0
    for i in maze:
        if(i.count(maze[0][0]) == len(i)):
            ans += i.count(maze[0][0])
            continue
        else:
            return False
        
    # print(ans)
    return True


def dfs(maze, p):
    q = deque()
    x,y = p
    q.append([x,y])
    maze[y][x] = 'o'

    d = [[False] * 10 for i in range(10)]

    cur = 0
    while(len(q)):
        tx,ty = q.pop()

        if(0 <= tx < 10 and 0 <= ty < 10):
            if(maze[ty][tx] == 'o' and d[ty][tx] == False):
                # for i in maze:
                #     print(''.join(i))
                # print('')

                d[ty][tx] = True
                maze[ty][tx] = 'x'
                cur += 1



                for i,j in [[1,0], [0,1], [-1,0], [0,-1]]:
                    q.append([tx+i,ty+j])
        else:
            continue
    return True if(isfullmaze(maze)) else False
    

# Generated by 1.1.4 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    maze = [list(input()) for i in range(10)]

    for j,y in enumerate(maze):
        for i,x in enumerate(y):
            if(maze[j][i] == 'x'):
                # print(i,j)    
                import copy
                tmaze = copy.deepcopy(maze)
                if(dfs(tmaze, [i, j])):
                    print(YES)
                    sys.exit()

    print(NO)


if __name__ == '__main__':
    main()
