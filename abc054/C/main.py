#!/usr/bin/env python3
import sys


def solve(N: int, M: int, a: "List[int]", b: "List[int]"):
    vertex = [[0] * N for i in range(N)]

    for i in range(M):
        vertex[a[i]-1][b[i]-1] += 1
        vertex[b[i]-1][a[i]-1] += 1

    import itertools
    ans = 0
    for x in itertools.permutations(range(N)):
        if(x[0] != 0):
            break
        plus = 1
        for i in range(N-1):
            plus = plus * vertex[x[i]][x[i+1]]

        ans += plus
             
    print(ans)
    return
    return


# Generated by 1.1.4 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    a = [int()] * (M)  # type: "List[int]" 
    b = [int()] * (M)  # type: "List[int]" 
    for i in range(M):
        a[i] = int(next(tokens))
        b[i] = int(next(tokens))
    solve(N, M, a, b)

if __name__ == '__main__':
    main()
