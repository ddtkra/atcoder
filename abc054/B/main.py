#!/usr/bin/env python3
import sys

YES = "Yes"  # type: str
NO = "No"  # type: str

def solve(N: int, M: int, A: "List[str]", B: "List[str]"):
    vertex = [[0] * N for i in range(N)]

    for i in range(M):
        vertex[A[i]-1][B[i]-1]

    import itertools
    ans = 0
    for x in itertools.permutations(range(N-1)):
        if(x[0] != 0):
            break
        plus = 1
        for i in range(N-1):
            plus = plus * vertex[x[i]][x[i+1]]

        ans += plus
             
    print(ans)
    return


# Generated by 1.1.4 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    A = [ next(tokens) for _ in range(N) ]  # type: "List[str]"
    B = [ next(tokens) for _ in range(M) ]  # type: "List[str]"
    solve(N, M, A, B)

if __name__ == '__main__':
    main()
