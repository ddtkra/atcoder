#!/usr/bin/env python3
import sys


def solve(H: int, W: int, N: int, a: "List[int]"):
    
    al = [[i]*a[i-1] for i in range(1,N+1)]

    import itertools
    al = list(itertools.chain.from_iterable(al))

    c = []
    for i in range(H):
        t = al[i*W:(i+1)*W]
        if(i%2 == 0):
            c.append(t)
        else:
            c.append(t[::-1])

    for i in c:
        print(' '.join(map(str,i)))
    # print(c)

    return


# Generated by 1.1.5 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    H = int(next(tokens))  # type: int
    W = int(next(tokens))  # type: int
    N = int(next(tokens))  # type: int
    a = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(H, W, N, a)

if __name__ == '__main__':
    main()
