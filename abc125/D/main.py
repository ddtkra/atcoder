#!/usr/bin/env python3
import sys


def solve(N: int, A: "List[int]"):
    for i in range(N-1):
        if(A[i] < 0 and A[i+1] < 0):
            A[i] = -1*A[i]
            A[i+1] = -1*A[i+1]
        elif(A[i] < 0 and A[i+1] >= 0):
            if(abs(A[i]) < abs(A[i+1])):
                A[i] = -1*A[i]
                A[i+1] = -1*A[i+1]
        elif(A[i] >= 0 and A[i+1] < 0):
            if(abs(A[i]) > abs(A[i+1])):
                A[i] = -1*A[i]
                A[i+1] = -1*A[i+1]

    print(sum(A))

    return

# Generated by 1.1.4 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [ int(next(tokens)) for _ in range(N) ]  # type: "List[int]"
    solve(N, A)

if __name__ == '__main__':
    main()
