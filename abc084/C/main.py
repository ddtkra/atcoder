#!/usr/bin/env python3
import sys


def solve(N: int, C: "List[int]", S: "List[int]", F: "List[int]"):
    ans = [0]*(N)
    for k in range(N-1):
        cst = S[k]+C[k]
        for i in range(k+1,N-1):
            if(cst < S[i]):
                cst = max(cst, S[i])
            elif(cst%F[i] == 0):
                cst = cst
            else:
                cst = cst + F[i] - (cst%F[i])
            cst += C[i]
        ans[k] = cst

    for i in ans:
        print(i)

    return

# Generated by 1.1.4 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    global N, C, S, F
    N = int(next(tokens))  # type: int
    C = [int()] * (N-1)  # type: "List[int]" 
    S = [int()] * (N-1)  # type: "List[int]" 
    F = [int()] * (N-1)  # type: "List[int]" 
    for i in range(N-1):
        C[i] = int(next(tokens))
        S[i] = int(next(tokens))
        F[i] = int(next(tokens))
    solve(N, C, S, F)

if __name__ == '__main__':
    main()
