#!/usr/bin/env python3
import sys


def solve(H: int, W: int, Q: int, a: "List[int]", b: "List[int]", px: "List[int]", py: "List[int]", qx: "List[int]", qy: "List[int]"):

    return


# Generated by 1.1.3 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    H = int(next(tokens))  # type: int
    W = int(next(tokens))  # type: int
    Q = int(next(tokens))  # type: int
    a = [ int(next(tokens)) for _ in range(H) ]  # type: "List[int]"
    b = [ int(next(tokens)) for _ in range(W) ]  # type: "List[int]"
    px = [int()] * (Q)  # type: "List[int]" 
    py = [int()] * (Q)  # type: "List[int]" 
    qx = [int()] * (Q)  # type: "List[int]" 
    qy = [int()] * (Q)  # type: "List[int]" 
    for i in range(Q):
        px[i] = int(next(tokens))
        py[i] = int(next(tokens))
        qx[i] = int(next(tokens))
        qy[i] = int(next(tokens))
    solve(H, W, Q, a, b, px, py, qx, qy)

if __name__ == '__main__':
    main()
