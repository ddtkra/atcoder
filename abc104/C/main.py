#!/usr/bin/env python3
import sys


def solve(D: int, G: int, p: "List[int]", c: "List[int]"):
    cm = sum(p)
    for i in range(1<<D):
        s = 0
        ct = 0
        for j in range(D):
            if((i>>j)&1):
                s += (j+1)*100*p[j]+c[j]
                # print(s)
                ct += p[j]
    
        for j in range(D, 0, -1):
            if(s >= G): break
            if((i>>(j-1))&1): continue
            u = 100*j
            n = (G-s+u-1)//u
            s += p[j-1]*u
            ct += min(n, p[j-1])

        cm = min(cm, ct)

    print(cm)
    
    return


# Generated by 1.1.5 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    D = int(next(tokens))  # type: int
    G = int(next(tokens))  # type: int
    p = [int()] * (D)  # type: "List[int]"
    c = [int()] * (D)  # type: "List[int]"
    for i in range(D):
        p[i] = int(next(tokens))
        c[i] = int(next(tokens))
    solve(D, G, p, c)

if __name__ == '__main__':
    main()
