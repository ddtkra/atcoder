#!/usr/bin/env python3
import sys


def solve(D: int, G: int, p: "List[int]", c: "List[int]"):

    # bit全探索
    mc = sum(p)
    for i in range(1 << D):
        s = 0
        cc = 0
        for j in range(D):
            if((i >> j) & 1):
                s += (j+1)*p[j]*100+c[j]
                cc += p[j]
        # if(s >= G):
        #     mc = min(mc, cc)
        # 以下はuwiさんの回答を参考
        for j in range(D-1, -1, -1):
            # ここはもう全部解くことが決まっている
            if((i>>j)&1):
                continue
            # 「すべて解く」のみで目的スコアに達する場合はそのまま抜けて良い　＆　前回の足して合計に達するならば出て良い
            if(s >= G):
                break
            # g: 最大のスコアの問題の一問あたりのスコア
            g = (j+1)*100
            # got: どのくらいとくか
            # g-1を足すことで、math.ceilを使わなくて良い(//で表現できる)
            got = (G-s+g-1)//g
            s += min(got, p[j])*g
            cc += min(got, p[j])
        mc = min(cc, mc)

    print(mc)

    return


# Generated by 1.1.5 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    D = int(next(tokens))  # type: int
    G = int(next(tokens))  # type: int
    p = [int()] * (D)  # type: "List[int]"
    c = [int()] * (D)  # type: "List[int]"
    for i in range(D):
        p[i] = int(next(tokens))
        c[i] = int(next(tokens))
    solve(D, G, p, c)

if __name__ == '__main__':
    main()
