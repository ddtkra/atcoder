#!/usr/bin/env python3
import sys


def solve(N: int, M: int, X: int, Y: int, a: "List[int]", b: "List[int]"):
    i = 0
    t = a[0]+X
    n = 'A'
    c = 0
    ab = sorted([['A', i] for i in a]+[['B', i] for i in b], key=lambda x:x[1])

    while i < len(ab):
        
        if n != ab[i][0] and t <= ab[i][1]:
            
            if n == 'A':
                n = 'B'
                t = ab[i][1] + Y
                c += 1
            else:
                n = 'A'
                t = ab[i][1] + X

        # print(ab[i], t, c)
        i += 1
        

    print(c)

    return


# Generated by 1.1.4 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    X = int(next(tokens))  # type: int
    Y = int(next(tokens))  # type: int
    a = [ int(next(tokens)) for _ in range(N) ]  # type: "List[int]"
    b = [ int(next(tokens)) for _ in range(M) ]  # type: "List[int]"
    solve(N, M, X, Y, a, b)

if __name__ == '__main__':
    main()
