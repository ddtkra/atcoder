#!/usr/bin/env python3
import sys
from collections import Counter, defaultdict

def solve(N: int, Q: int, s: str, t: "List[str]", d: "List[str]"):
    dic = defaultdict(list)
    for i in range(N):
        dic[s[i]].append(i)

    al = [1] * N
    print(dic)
    for i in range(Q):
        a = -1 if d[i] == 'L' else 1
        tl = dic[t[i]]
        for j in range(len(dic[t[i]])):
            t = al[tl[j]]
            al[tl[j]] = 0
            if(0 <= tl[j]+a < N):
                al[tl[j]+a] = al[tl[j]]

    print(al)            
        
    
    
    # # dic_left = defaultdict(int)
    # # dic_right = defaultdict(int)
    # dic = defaultdict(list)
    # for i in range(Q):
    #     if(d[i] == 'R'):
    #         dic[t[i]].append(1)
    #     else:
    #         dic[t[i]].append(-1)
    
    # # print(dic)
    # idic = defaultdict(list)
    # for k,v in dic.items():
    #     l = [0]
    #     x = v[0] 
    #     for i in range(1,len(v)):
    #         if(v[i-1] == v[i]):
    #             x += v[i]
    #             continue
    #         else:
    #             l.append(l[-1]+x)
    #             x = v[i]
    #     l.append(l[-1]+x)
    #     idic[k] = l

    # # print(idic)
    # ans = 0
    # for i in range(N):
    #     l = idic[s[i]]
    #     lp = i
    #     for j in l:
    #         # print(s[i], i+j)
    #         lp += j
    #         if(lp < 0 or lp >= N):
    #             break
    #     else:
    #         # print(s[i])
    #         ans += 1
    # print(ans)
    return


# Generated by 1.1.3 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    Q = int(next(tokens))  # type: int
    s = next(tokens)  # type: str
    t = [str()] * (Q)  # type: "List[str]" 
    d = [str()] * (Q)  # type: "List[str]" 
    for i in range(Q):
        t[i] = next(tokens)
        d[i] = next(tokens)
    solve(N, Q, s, t, d)

if __name__ == '__main__':
    main()
