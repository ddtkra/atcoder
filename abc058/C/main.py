#!/usr/bin/env python3
import sys
sample = 'abcdefghijklmnopqrstuvwxyz'


def solve(n: int, S: "List[str]"):
    d = []
    for i in list(sample):
        mx = [S[j].count(i) for j in range(n)]
        if(len(mx) == 0):
            d.append(0)
        else:
            d.append(min(mx))
    ans = ""
    for i,s in enumerate(list(sample)):
        ans += s*d[i]

    print(ans)
    # from collections import OrderedDict
    # d = {}
    # for i in list(sample):
    #     mx = []
    #     for j in range(n):
    #         mx.append(S[j].count(i))

    #     d[i] = min(mx) if len(mx) != 0 else 0

    # ans = ""
    # for k,v in d.items():
    #     print(k,v)
    #     ans += k*v

    # print(''.join(ans))



# Generated by 1.1.4 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    n = int(next(tokens))  # type: int
    S = [ next(tokens) for _ in range(n) ]  # type: "List[str]"
    solve(n, S)

if __name__ == '__main__':
    main()
