#!/usr/bin/env python3
import sys

def nPr(n, r):
   """
   Calculate the number of permutation (nPr = n!/(n-r)!).
   The parameters need to meet conditions of n >= r >= 0.
   It returns 1 if r == 0, which means there is one pattern
   to choice 0 items out of the number of n.
   """
   num = 1
   for i in range(n, n-r, -1):
       num *= i
   return num

def nCr(n, r):
    """
    Calculate the number of combination (nCr = nPr/r!).
    The parameters need to meet the condition of n >= r >= 0.
    It returns 1 if r == 0, which means there is one pattern
    to choice 0 items out of the number of n.
    """

    # 10C7 = 10C3
    r = min(r, n-r)

    # Calculate the numerator.
    numerator = 1
    for i in range(n, n-r, -1):
        numerator *= i

    # Calculate the denominator. Should use math.factorial?
    denominator = 1
    for i in range(r, 1, -1):
        denominator *= i

    return numerator // denominator


def solve(N: int, s: "List[str]"):
    for i in range(N):
        l = list(s[i])
        l.sort()
        s[i] = ''.join(l)

    from collections import Counter

    c = Counter(s)
    ans = 0
    # print(c.most_common())
    for k, v in c.most_common():
        if( v >= 2):
            ans += nCr(v,2)

    print(ans)
    return


# Generated by 1.1.4 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    s = [ next(tokens) for _ in range(N) ]  # type: "List[str]"
    solve(N, s)

if __name__ == '__main__':
    main()
